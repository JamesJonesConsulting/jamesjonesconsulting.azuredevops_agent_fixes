---
- set_fact:
    vsts_agent_working_dir: "{{ vsts_agent_base_folder }}/{{ agent.folder }}"
- name: Create directory for the agent
  file:
    path: "{{ vsts_agent_working_dir }}"
    state: directory 
    owner: "{{ agent.username }}"
    group: "{{ agent.username }}"
- name: Unarchive a file that needs to be downloaded (added in 2.0)
  ansible.builtin.unarchive:
    src: "https://vstsagentpackage.azureedge.net/agent/{{ vsts_agent_version }}/vsts-agent-linux-x64-{{ vsts_agent_version }}.tar.gz"
    dest: "{{ vsts_agent_working_dir }}"
    owner: "{{ agent.username }}"
    group: "{{ agent.username }}"   
    remote_src: yes
- name: Configure the install of the vsts agent 
  command: "./config.sh {{ opts | join(' ') }}"
  become: true
  become_user: "{{ agent.username }}"
  environment: "{{ vsts_agent_environment }}"
  vars:
    opts:
      - "--unattended"
      - "--acceptTeeEula"
      - "--agent {{ agent.folder | basename }}"
      - "--url {{ vsts_agent_url }}"
      - "--auth PAT"
      - "--token {{ vsts_agent_registration_token }}"
      - "--pool {{ agent.pool }}"
      - "--replace"
      - "--work {{ vsts_agent_working_dir }}"
  args:
    chdir: "{{ vsts_agent_working_dir }}"
- name: Update the environment file 
  community.general.ini_file:
    path: "{{ vsts_agent_working_dir }}/.env"
    option: "{{ cnf.key }}"
    value: "{{ cnf.value }}"
    section: null
    no_extra_spaces: true
  loop: "{{ vsts_agent_environment | dict2items }}"
  loop_control:
    loop_var: cnf
- name: Install the service 
  command: "./svc.sh {{ cmd }}"
  loop:
    - install
  loop_control:
    loop_var: cmd
  args:
    chdir: "{{ vsts_agent_working_dir }}"
- name: Reload systemd 
  ansible.builtin.systemd:
    daemon_reload: yes
- name: Populate service facts
  ansible.builtin.service_facts:
- name: Match services running from that folder 
  shell: |
    cat $(systemctl show -P FragmentPath {{ svc }}) | grep ExecStart | cut -f 2 -d '=' | head -n 1 | xargs dirname
  loop: "{{ ansible_facts.services.keys() | select('search','^vsts') | list }}"
  loop_control:
    loop_var: svc
  register: vsts_service_home_folders
- block:
    - name: Ensure overlay directories existing
      file:
        path: "/etc/systemd/system/{{ vsts_systemd_service_name }}.d"
        state: directory 
    - name: Add overlays
      template:
        src: templates/overlay.conf.j2
        dest: "/etc/systemd/system/{{ vsts_systemd_service_name }}.d/overlay.conf"
    - name: Perform a daemon-reload to pick up all the new overlays
      ansible.builtin.systemd:
        daemon_reload: yes
  vars:
    vsts_systemd_service_name: "{{ vsts_service_home_folders.results | selectattr('stdout', 'equalto', vsts_agent_working_dir) | map(attribute='svc') | flatten | list | first }}"
- name: Start the service 
  command: "./svc.sh {{ cmd }}"
  loop:
    - start
  loop_control:
    loop_var: cmd
  args:
    chdir: "{{ vsts_agent_working_dir }}"


